#! python

import argparse
import PySimpleGUI as sg

import mcpt

import fast_autocomplete as fac

ENGLISH_ALPHABET = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]
RUSSIAN_ALPHABET = ["а", "б", "в", "г", "д", "е", "ё", "ж", "з", "и", "й", "к", "л", "м", "н", "о", "п", "р", "с", "т", "у", "ф", "х", "ц", "ч", "ш", "щ", "ъ", "ы", "ь", "э", "ю", "я"]


class FacAC:
    def __init__(self, fac_ac, char_limit):
        self._fac_ac = fac_ac
        self._char_limit = char_limit

    def __call__(self, prefix):
        words = self._fac_ac.get_tokens_flat_list(prefix)
        index = 0
        chars = 0
        for word in words:
            chars += len(word) + 1
            if chars > self._char_limit:
                break
            index += 1
        return words[:index]

def main(args):
    opt_no = args.row_no * 2
    sg.theme("GreenTan")

    alphabet = ENGLISH_ALPHABET

    dict_file = mcpt.utils.search_data_file(args.dictionary)
    if dict_file:
        words = mcpt.utils.word_frquency_from_csv_file(dict_file)
        for word in words.keys():
            if word[0] in ENGLISH_ALPHABET:
                alphabet = ENGLISH_ALPHABET
                break
            if word[0] in RUSSIAN_ALPHABET:
                alphabet = RUSSIAN_ALPHABET
                break
        word_ac = FacAC(fac.AutoComplete(words, valid_chars_for_string="".join(alphabet)), 38)
    else:
        word_ac = None

    generator = mcpt.ChoiceGenerator(opt_no, alphabet, word_ac)
    layout = [[sg.Button("", key='Up', size=(38, 1))]] + \
             [[sg.Button("", key=('Opt %d' % i), size=(18, 1)),
               sg.Button("", key=('Opt %d' % (i + 1)), size=(18, 1))] for i in range(0, opt_no, 2)] + \
             [[sg.Button("", key='Dn', size=(38, 1))]] + \
             [[sg.MLine(key='-TEXT-'+sg.WRITE_ONLY_KEY, size=(41, 10))]]

    window = sg.Window('Папочка', layout, font=(args.font_name, args.font_size), element_justification='c').Finalize()

    while True:  # Event Loop
        window['Up'].update(generator.up())
        window['Dn'].update(generator.dn())
        options = generator.options()
        for opt in range(opt_no):
            window['Opt {}'.format(opt)].update(options[opt])
        event, values = window.read()
        if event == sg.WIN_CLOSED:
            break
        if event == "Up":
            generator.go_up()
        if event == "Dn":
            generator.go_dn()
        if event.startswith('Opt'):
            generator.choose(int(event[-1]))
        output = generator.flush()
        window['-TEXT-'+sg.WRITE_ONLY_KEY].print(output, end="")
        print(output, end="")

    window.close()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(prog="MCPT", description='Multiple Choice Predictive Typing application.')
    parser.add_argument('-n', '--row_no', type=int, default=3, metavar='N',
                        help='Number of choice rows')
    parser.add_argument('-f', '--font_name', type=str, default="DejaVu Sans", metavar='N',
                        help='Font name')
    parser.add_argument('-s', '--font_size', type=int, default=39, metavar='N',
                        help='Font size')
    parser.add_argument('-d', '--dictionary', type=str, default="english-10k", metavar='Data File',
                        help='Data file for word dictionary')

    args = parser.parse_args()
    main(args)
